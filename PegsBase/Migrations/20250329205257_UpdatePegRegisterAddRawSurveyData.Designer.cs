// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PegsBase.Data;

#nullable disable

namespace PegsBase.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250329205257_UpdatePegRegisterAddRawSurveyData")]
    partial class UpdatePegRegisterAddRawSurveyData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PegsBase.Models.PegRegister", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FromPeg")
                        .HasColumnType("text");

                    b.Property<decimal?>("GradeElevation")
                        .HasColumnType("numeric");

                    b.Property<bool>("HasPegCalc")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Locality")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("PegFailed")
                        .HasColumnType("boolean");

                    b.Property<string>("PegName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PointType")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("SurveyDate")
                        .HasColumnType("date");

                    b.Property<string>("Surveyor")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("XCoord")
                        .HasColumnType("numeric");

                    b.Property<decimal>("YCoord")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ZCoord")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("PegRegister");
                });

            modelBuilder.Entity("PegsBase.Models.RawSurveyData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackSightPeg")
                        .HasColumnType("text");

                    b.Property<string>("ForeSightPeg")
                        .HasColumnType("text");

                    b.Property<decimal>("HAngleDirectArc1Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleDirectArc1Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleDirectArc2Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleDirectArc2Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleTransitArc1Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleTransitArc1Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleTransitArc2Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("HAngleTransitArc2Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("InstrumentHeight")
                        .HasColumnType("numeric");

                    b.Property<string>("Locality")
                        .HasColumnType("text");

                    b.Property<bool>("PegFailed")
                        .HasColumnType("boolean");

                    b.Property<decimal>("SlopeDistanceBacksight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SlopeDistanceForesight")
                        .HasColumnType("numeric");

                    b.Property<string>("StationPeg")
                        .HasColumnType("text");

                    b.Property<DateOnly>("SurveyDate")
                        .HasColumnType("date");

                    b.Property<string>("Surveyor")
                        .HasColumnType("text");

                    b.Property<decimal>("TargetHeightBacksight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TargetHeightForesight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleDirectArc1Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleDirectArc1Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleDirectArc2Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleDirectArc2Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleTransitArc1Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleTransitArc1Foresight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleTransitArc2Backsight")
                        .HasColumnType("numeric");

                    b.Property<decimal>("VAngleTransitArc2Foresight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("RawSurveyData");
                });
#pragma warning restore 612, 618
        }
    }
}
