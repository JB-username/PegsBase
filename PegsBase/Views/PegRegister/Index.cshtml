@model List<PegRegister>
@using PegsBase.Models.Constants
@using PegsBase.Models.Entities

@{
	ViewData["Title"] = "Peg Register";
}

@{
	string filter = Context.Request.Query["filter"];
	string search = Context.Request.Query["search"];
	string sortOrder = Context.Request.Query["sortOrder"];
	bool isBeacon = filter == "Beacon";
	bool isControl = filter == "Control";
	bool showLevel = !isBeacon;
	bool showGrade = !(isBeacon || isControl);
}



@if (TempData["Success"] != null)
{
	<div class="alert alert-info alert-dismissible fade show" role="alert" id="successAlert">
		<strong>Success:</strong> @TempData["Success"]
	</div>

	<script>
		setTimeout(function () {
			var alertElem = document.getElementById("successAlert");
			if (alertElem) {
				alertElem.classList.remove("show");
				alertElem.classList.add("hide");
			}
		}, 5000);
	</script>
}


<div class="container mb-2 mt-5 text-center">
	<h2>Peg Register</h2>
</div>

<div class="container mb-4">
	<div class="d-flex justify-content-between align-items-center flex-wrap mb-3">
		<h2 class="mb-3 mb-md-0"></h2>

		<div class="btn-group">


			<button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
				Import Options
			</button>
			<ul class="dropdown-menu">
				<li><a class="dropdown-item" asp-action="Create">Manual Entry</a></li>
				<li><a class="dropdown-item" asp-action="Upload">Bulk Import CSV</a></li>
				<li><a class="dropdown-item" asp-action="UploadDat">Upload Coordinate File</a></li>
			</ul>
		</div>
	</div>

	<!-- Filters -->
	<form id="filterForm" class="row g-2 mb-4" onsubmit="event.preventDefault();">
		<div class="col-md-3">
			<input type="text" name="search" value="@search" class="form-control" placeholder="Search" />
		</div>

		<div class="col-md-3">
			<select name="filter" class="form-select">
				<option value="">All Types</option>
				<option value="Peg" selected="@(filter == "Peg")">Pegs</option>
				<option value="Control" selected="@(filter == "Control")">Controls</option>
				<option value="Beacon" selected="@(filter == "Beacon")">Beacons</option>
			</select>
		</div>

		<div class="col-md-3">
			<select name="sortOrder" class="form-select">
				<option value="date_desc" selected="@(sortOrder == "date_desc")">Newest First</option>
				<option value="date_asc" selected="@(sortOrder == "date_asc")">Oldest First</option>
				<option value="name_asc" selected="@(sortOrder == "name_asc")">Name A-Z</option>
				<option value="name_desc" selected="@(sortOrder == "name_desc")">Name Z-A</option>
			</select>
		</div>

		<div class="col-md-3 text-end">
			<select name="levelId" class="form-select">
				<option value="">All Levels</option>
				@foreach (var level in (ViewBag.Levels as List<Level>) ?? new List<Level>())
				{
					<option value="@level.Id" selected="@(level.Id.ToString() == Context.Request.Query["levelId"])">
						@level.Name
					</option>
				}

			</select>
		</div>
	</form>
</div>

<form method="post" id="bulkActionForm">
<div class="container mb-4 mt-1">
	<div class="row pt-4" id="pegTableContainer">
		<div>
			@await Html.PartialAsync("_PegTable", Model)
		</div>
	</div>
</div>
</form>


@if (TempData["Success"]?.ToString()?.Contains("imported") == true)
{
	<script>
		window.addEventListener('DOMContentLoaded', (event) => {
			const toastEl = document.getElementById('uploadToast');
			const toast = new bootstrap.Toast(toastEl, { delay: 4000 });
			toast.show();
		});
	</script>
}

@if (TempData["Success"] != null)
{
	<script>
		window.addEventListener('DOMContentLoaded', () => {
			showToast('@TempData["Success"]', 'success');
		});
	</script>
}


<script>

</script>


@section Scripts {
	<script>
		// Define the checkbox logic function
		function setupCheckboxExportLogic() {
			const checkboxes = document.querySelectorAll('.export-check');
			const exportButtons = document.getElementById('exportButtons');

			function toggleExportButtons() {
				const anyChecked = Array.from(checkboxes).some(cb => cb.checked);
				exportButtons.classList.toggle('d-none', !anyChecked); // Correct class toggling!
			}

			checkboxes.forEach(cb => {
				cb.addEventListener('change', toggleExportButtons);
			});

			toggleExportButtons(); // Check state initially
		}

		document.addEventListener('DOMContentLoaded', function () {
			setupCheckboxExportLogic();
		});

		function loadPegTable(searchOverride = null) {
			const search = searchOverride ?? document.querySelector('input[name="search"]').value;
			const filter = document.querySelector('select[name="filter"]').value;
			const sortOrder = document.querySelector('select[name="sortOrder"]').value;
			const levelId = document.querySelector('select[name="levelId"]').value;

			const url = `/PegRegister/GetFilteredPegTable?search=${encodeURIComponent(search)}&filter=${encodeURIComponent(filter)}&sortOrder=${encodeURIComponent(sortOrder)}&levelId=${encodeURIComponent(levelId)}`;
			fetch(url)
				.then(res => res.text())
				.then(html => {
					document.getElementById("pegTableContainer").innerHTML = html;
					setupCheckboxExportLogic(); // Re-attach listeners after reload
				});
		}

		// Filter/Search event bindings
		document.querySelector('input[name="search"]').addEventListener("input", (e) => {
			clearTimeout(window.searchDebounce);
			const currentValue = e.target.value;

			window.searchDebounce = setTimeout(() => {
				loadPegTable(currentValue);
			}, 300);
		});

		document.querySelector('select[name="filter"]').addEventListener("change", () => {
			const searchValue = document.querySelector('input[name="search"]').value;
			loadPegTable(searchValue);
		});

		document.querySelector('select[name="sortOrder"]').addEventListener("change", () => {
			const searchValue = document.querySelector('input[name="search"]').value;
			loadPegTable(searchValue);
		});

		document.querySelector('select[name="levelId"]').addEventListener("change", () => {
			const searchValue = document.querySelector('input[name="search"]').value;
			loadPegTable(searchValue);
		});

	</script>
}


